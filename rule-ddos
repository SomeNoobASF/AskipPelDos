#!/usr/bin/env bash

print_default() {
	if command -v lolcat &>/dev/null; then
		echo -e "$1" | lolcat
	else
		echo -e "${BGray}$1"
	fi
}

print_default2() {
    echo -e "${BGray}$1"
}

print_success() {
	if command -v lolcat &>/dev/null; then
		echo -e "✓ Success. $1" | lolcat
	else
		echo -e "${BGray}✓ Success. $1"
	fi
}

print_warning () {
    if command -v lolcat &>/dev/null; then
        echo -e "⚠︎ Warning: $1" | lolcat >&2
    else
        echo -e "${BGray}⚠︎ Warning: $1" >&2
    fi
}

print_error() {
	if command -v lolcat &>/dev/null; then
		echo -e "✗ Fail. $1" | lolcat >&2
	else
		echo -e "${BRed}✗ Fail. $1" >&2
	fi
}

rootcheck() {
    if [[ $EUID -ne 0 ]]; then
        print_warning "This script must be run as root. Restarting with sudo/su..."

        if command -v sudo &> /dev/null; then
            print_default2 "Automatic choice: 'sudo' was selected and will be used."
            sudo -E "$SHELL" "$BASH_SOURCE" "$@"
            exit $?
        elif command -v su &> /dev/null; then
            print_default2 "Automatic choice: 'su' was selected and will be used."
            script_path="$(readlink -f "$BASH_SOURCE")"
            su -c "$script_path" "$@"
            exit $?
        else
            print_error "Automatic choice failed: neither sudo nor su was found. Exiting."
            exit 1
        fi
    fi
}

accidental_start_prevention() {
    print_default "Accidental start prevention: press 'enter' within 5 seconds to continue, CTRL+C to cancel."

    for counter in {1..5}; do
        if IFS= read -rt 1 -N 1 key; then
            case $key in
                $'\n') print_success "Starting the script..." && return ;;
                $'\x03') print_default2 "Ctrl+C detected. Exiting..." && exit 130 ;;
            esac
        fi
    done

    print_default2 "\nNo response within 5 seconds. Exiting..."
    exit 0
}

cleanup() {
    print_default "Received CTRL+C. Exiting..."
    tput sgr0
    exit 130
}

rootcheck "$@"
if [ "$1" != "--skip-distro-check" ]; then
    if command -v lsb_release > /dev/null 2>&1; then
        distro=$(lsb_release -is)
    elif [ -e /etc/os-release ]; then
        distro=$(awk -F= '/^ID=/{print tolower($2)}' /etc/os-release)
    else
        print_error "Failed to determine the distribution. Make sure lsb-release is installed or /etc/os-release is accessible. If you're sure this is an error, use --skip-distro-check."
        exit 1
    fi
    
    case "$distro" in
        "Ubuntu" | "Debian")
            ;;
        *)
            print_error "Your distribution ($distro) is not supported. If you're sure this is an error, use --skip-distro-check and report it by opening an issue on GitHub."
            exit 1
            ;;
    esac
fi

dependencies=("iptables" "nftables" "ipset" "netfilter-persistent" "git")
missing_dependencies=()
for dep in "${dependencies[@]}"; do
    if ! dpkg -s "$dep" &>/dev/null; then
        missing_dependencies+=("$dep")
    fi
done

if [ "${#missing_dependencies[@]}" -gt 0 ]; then
    print_warning "The following dependencies are missing: ${missing_dependencies[*]}"
    
    if sudo -v >/dev/null 2>&1; then
        print_default2 "Do you want to install them with sudo? (y/n)"

        read -r install_response
        case "$install_response" in
            [yY])
                apt install "${missing_dependencies[@]}" -y
                ;;
            [nN])
                print_warning "[ERR 2] Exiting..."
                exit 1
                ;;
            *)
                print_error "Repond 'y' ou 'n'"
                exit 1
                ;;
        esac
    else
        print_warning "Dependence [ERR 31 | Manual installing require]"
        for dep in "${missing_dependencies[@]}"; do
            echo "  - $dep"
        done
        exit 1
    fi
fi

config_file="config.sh"
blacklist_file="blacklist"

check_config() {
    if [ ! -f "$config_file" ]; then
        print_error "Config [ERR 96 | $config_file]"
        exit 1
    fi

    if [ ! -r "$config_file" ]; then
        print_error "Config [ERR 97 | $config_file]"
        exit 1
    fi

    if [ ! -s "$config_file" ]; then
        print_error "Config [ERR 98 | $config_file]"
        exit 1
    fi
}

check_blacklist() {
    if [ ! -f "$blacklist_file" ]; then
        print_error "Blacklist [ERR 96 | $blacklist_file]"
        exit 1
    fi

    if [ ! -r "$blacklist_file" ]; then
        print_error "Blacklist [ERR 97 | $blacklist_file]"
        exit 1
    fi
    
    if [ ! -s "$blacklist_file" ]; then
        print_error "Blacklist [ERR 98 | $blacklist_file]"
        exit 1
    fi
}

check_blacklist
check_config

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. config.sh

accidental_start_prevention
 "$NFT" flush ruleset
 "$NFT" add table filter > /dev/null 2>&1 &
 "$IPS" destroy blacklist > /dev/null 2>&1 &
 "$IP" -P INPUT DROP
 "$IP" -A INPUT -i lo -s 127.0.0.0/8 -j ACCEPT
 "$IP" -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
 "$IP" -A INPUT -p tcp --dport "$SSH" -j ACCEPT
 "$IP" -t raw -A PREROUTING -p tcp --syn \
  -m hashlimit --hashlimit-mode srcip --hashlimit-srcmask 32 \
  --hashlimit-dstmask 32 --hashlimit-name synflood \
  --hashlimit-above "$SPL" --hashlimit-htable-expire "$HTE" \
  --hashlimit-htable-size "$HTS" --hashlimit-htable-max "$HTM" -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags SYN,ACK SYN,ACK \
  -m hashlimit --hashlimit-mode srcip --hashlimit-srcmask 32 \
  --hashlimit-dstmask 32 --hashlimit-name synackflood \
  --hashlimit-above "$SAPL" --hashlimit-burst 2 \
  --hashlimit-htable-expire "$HTE" --hashlimit-htable-size "$HTS" \
  --hashlimit-htable-max "$HTM" -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags RST RST \
  -m hashlimit --hashlimit-mode srcip --hashlimit-srcmask 32 \
  --hashlimit-dstmask 32 --hashlimit-name rstflood \
  --hashlimit-above "$RPL" --hashlimit-burst 2 --hashlimit-htable-expire "$HTE" \
  --hashlimit-htable-size "$HTS" --hashlimit-htable-max "$HTM" -j DROP
 "$IP" -t raw -A PREROUTING -p udp -m hashlimit --hashlimit-above "$UPL" \
  --hashlimit-mode srcip --hashlimit-srcmask 32 --hashlimit-dstmask 32 \
  --hashlimit-name udp-flood-limit --hashlimit-burst "$UPL" \
  --hashlimit-htable-size "$HTS" --hashlimit-htable-max 65536 \
  --hashlimit-htable-expire "$HTE" -j DROP
 "$IP" -t raw -A PREROUTING -p icmp -m comment --comment "ICMP hashlimit" -m hashlimit \
  --hashlimit-mode srcip --hashlimit-srcmask 32 --hashlimit-dstmask 32 \
  --hashlimit-name icmp-limit --hashlimit-above "$IPL" --hashlimit-burst 2 \
  --hashlimit-htable-size "$HTS" --hashlimit-htable-max 65536 \
  --hashlimit-htable-expire "$HTE" -j DROP
 "$IP" -t raw -A PREROUTING -p icmp --icmp-type address-mask-request -j DROP
 "$IP" -t raw -A PREROUTING -p icmp --icmp-type router-solicitation -j DROP
 "$IP" -t raw -A PREROUTING -p icmp --icmp-type timestamp-request -j DROP
 "$IP" -t raw -A PREROUTING -p icmp --icmp-type redirect -j DROP
 "$IP" -t raw -A OUTPUT -p icmp --icmp-type port-unreach -m limit --limit "$OPL" --limit-burst 2 -j ACCEPT
 "$IP" -t raw -A OUTPUT -p icmp --icmp-type port-unreach -j DROP
 "$IP" -t raw -A OUTPUT -p tcp --tcp-flags RST RST -m limit --limit "$OTRL" -j ACCEPT
 "$IP" -t raw -A OUTPUT -p tcp --tcp-flags RST RST -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j "$ITFPA"
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j "$ITFPA"
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j "$ITFPA"
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j "$ITFPA"
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j "$ITFPA"
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL NONE -j "$ITFPA"
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL ALL -j "$ITFPA"
 "$IP" -t raw -A PREROUTING -p udp -m multiport --sports "$LUSP" -m hashlimit \
  --hashlimit-mode srcip,srcport --hashlimit-name Amplification-Limit \
  --hashlimit-above 256/m -j DROP
 "$IP" -t raw -I PREROUTING -p tcp --syn ! --sport 1024:65535 -m comment --comment "SYN: Invalid Source Port" -j DROP
 "$IP" -t mangle -I PREROUTING -p all -m conntrack --ctstate "$ST" -m comment --comment "Packet State Filter" -j DROP
 "$IP" -t mangle -A PREROUTING -p tcp -m connlimit --connlimit-above "$CL" --connlimit-mask 32 \
  -m comment --comment "Connection Limit" -j "$CLA"
 "$IP" -t mangle -I PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -m comment --comment "State NEW but not SYN" -j DROP
 "$IP" -t mangle -I PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss "$MSS" -m comment --comment "Invalid MSS" -j DROP
 "$IP6" -t raw -A PREROUTING -p icmpv6 -m limit --limit 3/s -j ACCEPT
 "$IP6" -t raw -A PREROUTING -p icmpv6 -j DROP
 "$IP6" -t raw -A PREROUTING -p tcp --syn -m limit --limit 7/s --limit-burst 4 -j ACCEPT
 "$IP6" -t raw -A PREROUTING -p tcp --syn -j DROP
 "$IP6" -t raw -A PREROUTING -m frag -j DROP
"$IPS" create blacklist nethash hashsize 260000 > /dev/null 2>&1
while IFS= read -r bad_ip; do
    "$IPS" add blacklist "$bad_ip" > /dev/null 2>&1
done <"./blacklist"
"$IP" -t raw -A PREROUTING -m set --match-set blacklist src -j "$IBA" > /dev/null 2>&1

 "$IP" -t raw -A PREROUTING -p tcp --tcp-option 1 -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-option 3 -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-option 5 -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-option 8 -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-option 27 -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-option 34 -j DROP
 "$IP" -t raw -I PREROUTING -p tcp --dport 3306 -m string --string "union select" --algo bm -j DROP
 "$IP" -t raw -I PREROUTING -p tcp --dport 3306 -m string --string "information_schema" --algo bm -j DROP
 "$IP" -t raw -A PREROUTING -p udp --sport 53 -m string --string "Refused" --algo bm -j DROP
 "$IP" -t raw -A PREROUTING -p udp --sport 53 -m string --string "0000000000000000" --algo bm -j DROP
 "$IP" -t raw -A PREROUTING -p udp --sport 53 -m string --hex-string "|3000300030003000300030003000300030003000300030003000|" --algo bm -j DROP
 "$IP" -t raw -A PREROUTING -p udp --dport 123 -m u32 --u32 "0>>22&0x3C@8&0xFF" -j DROP
 "$IP" -t raw -A PReROUTING -p tcp --syn -m u32 --u32 "0>>22&0x3C@12>>26&0x3F=0" -j DROP
 "$IP" -t mangle -A PREROUTING -p tcp --syn -m recent --name blacklist --set -j DROP
 "$IP" -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,ACK -m recent --name blacklist --rcheck --seconds 60 --hitcount 10 -j DROP
 # BETA TCF
 "$IP" -t raw -A PREROUTING -p tcp --syn -m u32 --u32 "12&0xFFFF=0x0" -j DROP
 # BETA
 "$IP" -t raw -A PREROUTING -p tcp -m length ! --length 40:1500 -j DROP
 "$IP" -t raw -A PREROUTING -p udp -m length ! --length 20:1500 -j DROP
 "$IP" -t raw -A PREROUTING -p icmp -m length ! --length 64:72 -j DROP
 "$IP" -t mangle -A PREROUTING -p tcp --dport "$SSH" -m connlimit --connlimit-above 3 -j REJECT
 "$IP" -A INPUT -p tcp --dport 80 -m connlimit --connlimit-above 20 --connlimit-mask 32 -j DROP
 "$IP" -A INPUT -p tcp --dport 443 -m connlimit --connlimit-above 20 --connlimit-mask 32 -j DROP
 "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'python-requests' --algo kmp -j DROP
 "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'benchmark' --algo kmp -j DROP
 "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'MD5(' --algo kmp -j DROP
 "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'censys' --algo kmp -j DROP
 "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'inspect' --algo kmp -j DROP
 "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'scanner' --algo kmp -j DROP
 "$IP" -t raw -A PREROUTING -p tcp -m multiport --dports "$HTTP" -m string --string 'shodan' --algo kmp -j DROP
 "$IP" -A INPUT -p udp --dport 5060 -m string --string "sipvicious" --algo bm -j DROP
 "$IP" -A INPUT -p udp --dport 5060 -m string --string "friendly-scanner" --algo bm -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --dport 25 -m string --string "HELO" --algo bm --to 65535 -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --dport 25 -m string --string "EHLO" --algo bm --to 65535 -j DROP
 "$IP" -t raw -A PREROUTING -m string --string "Torrent" --algo bm -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --dport 21 -m string --string "SITE EXEC" --algo bm -j DROP
 "$IP" -t raw -A PREROUTING -p udp --dport 53 -m string --string "recursion" --algo bm -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --dport 53 -m string --hex-string "|0d 0a 0d 0a|" --algo bm -j DROP
 "$IP" -t raw -A PREROUTING -p udp --dport 53 -m udp -m string ! --string "DNS" --algo bm --to 65535 -j ACCEPT
 "$IP" -t raw -A PREROUTING -p udp --dport 123 -m udp -m string ! --string "NTP" --algo bm --to 65535 -j ACCEPT
 "$IP" -t raw -A PREROUTING -p tcp --dport 443 -m u32 --u32 "52=0x18030000 && 56=0x00000000" -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --dport 80 -m string --algo bm --string '() {' -j DROP
 "$IP" -t raw -A PREROUTING -p icmp --icmp-type 3/4 -j DROP
 "$IP" -t raw -A PREROUTING -p tcp -m multiport --sports 0,1 -j DROP
 "$IP" -t raw -A PREROUTING -p udp -m multiport --sports 0,1 -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK ACK -m hashlimit --hashlimit-mode srcip --hashlimit-name ackflood --hashlimit-above 1000/s --hashlimit-burst 2 -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,PSH ACK,PSH -m hashlimit --hashlimit-mode srcip --hashlimit-name ackpshflood --hashlimit-above 1000/s --hashlimit-burst 2 -j DROP
 "$IP" -t raw -A PREROUTING -p udp --sport 3478 -j DROP
 "$IP" -t raw -A PREROUTING -p udp -m string --string "STUN" --algo kmp -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --syn -m conntrack --ctstate NEW -m recent --set
 "$IP" -t raw -A PREROUTING -p tcp --syn -m conntrack --ctstate NEW -m recent --update --rcheck --rttl --seconds 5 --hitcount 30 
 "$IP" -t mangle -A PREROUTING -p all -m conntrack --ctstatus NONE -j DROP

if [ ! -d "$backup_dir" ]; then
    if ! mkdir -p "$backup_dir"; then
        print_error "Backup [ERR 102 | $backup_dir ]" >&2
        exit 1
    fi
fi

if ! cp "$sysctl_conf" "$backup_file"; then
    print_error "Backup [ERR 103]" >&2
    exit 1
fi

if [ "$num_backups" -gt "$max_backups" ]; then
    if ! find "$backup_dir" -maxdepth 1 -type f -printf '%T@ %p\n' | sort -k1,1n | head -n -"$max_backups" | cut -d' ' -f2- | xargs -I {} rm "{}"; then
        print_error "Backup [ERR 104]" >&2
        exit 1
    fi
fi

echo -e "
#
# /etc/sysctl.conf - Configuration file for setting system variables
# See /etc/sysctl.d/ for additional system variables.
# See sysctl.conf (5) for information.
#

#kernel.domainname = example.com

# Custom conntrack timeouts - specially against DDoS attacks.
# --------------------------------
 net.netfilter.nf_conntrack_tcp_timeout_last_ack = 10
 net.netfilter.nf_conntrack_tcp_timeout_close = 5
 net.netfilter.nf_conntrack_tcp_timeout_close_wait = 5
 net.netfilter.nf_conntrack_tcp_timeout_time_wait = 5
 net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 20
 net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 20
 net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 25
 net.netfilter.nf_conntrack_tcp_timeout_unacknowledged = 20
 net.netfilter.nf_conntrack_generic_timeout = 300
 net.netfilter.nf_conntrack_udp_timeout = 10
 net.netfilter.nf_conntrack_icmp_timeout = 2
 net.netfilter.nf_conntrack_icmpv6_timeout = 3

# Enabling SYN-Cookies.
# Facilitates SYN Flood DDoS mitigation.
# If your server frequently faces TCP DDoS attacks,
# you can set the value to '2' here.
# Caution: certain hosting providers might block syncookies.
# Verify if your hoster enforces this. If yes, set it to '0'.
# --------------------------------
 net.ipv4.tcp_syncookies = 1

# Set custom SYN/SYN-ACK retries count.
# Helps in TCP DDoS mitigation.
# Try 1/1 instead of 2/2 if you have time for testing :)
# --------------------------------
 net.ipv4.tcp_synack_retries = 2
 net.ipv4.tcp_syn_retries = 2

# Set custom NIC rmem/wmem buffer size.
# --------------------------------
 net.core.rmem_max = 33554432
 net.core.wmem_max = 33554432

# Network security hardening.
# Usually causes problems on routers.
# --------------------------------
 net.ipv4.conf.all.accept_redirects = 0
 net.ipv4.conf.all.secure_redirects = 0
 net.ipv4.conf.all.send_redirects = 0
 net.ipv4.conf.all.accept_source_route = 0
 net.ipv6.conf.all.accept_source_route = 0
 net.ipv6.conf.all.accept_ra = 0
 net.ipv4.conf.all.secure_redirects = 1
 net.ipv6.conf.all.drop_unsolicited_na = 1
 net.ipv6.conf.all.use_tempaddr = 2
 net.ipv4.conf.all.drop_unicast_in_l2_multicast = 1
 net.ipv6.conf.all.drop_unicast_in_l2_multicast = 1
 net.ipv6.conf.default.dad_transmits = 0
 net.ipv6.conf.default.autoconf = 0
 # net.ipv4.ip_forward = 0 # Disables ip_forward (blocks VPNs/NATs)
 # net.ipv4.ip_no_pmtu_disc = 3 # Hardened PMTU Discover Mode (usually not needed)

# Prevent ARP Spoofing.
# --------------------------------
 net.ipv4.conf.all.drop_gratuitous_arp = 1
 net.ipv4.conf.all.arp_ignore = 1
 net.ipv4.conf.all.arp_filter = 1

# Disable IGMP Multicast reports.
# --------------------------------
 net.ipv4.igmp_link_local_mcast_reports = 0

# Overall security hardening.
# --------------------------------
 kernel.dmesg_restrict = 1
 kernel.kptr_restrict = 1
 fs.protected_symlinks = 1
 fs.protected_hardlinks = 1
 fs.protected_fifos = 2
 fs.protected_regular = 2
 kernel.unprivileged_bpf_disabled = 1
 kernel.unprivileged_userns_clone = 0
 kernel.printk = 3 3 3 3
 net.core.bpf_jit_harden = 2
 vm.unprivileged_userfaultfd = 0
 kernel.kexec_load_disabled = 1
 #kernel.sysrq = 0 # Disables sysrq (not recommended)

# Performance tuning.
# Set somaxconn to 3240000 if you have a very powerful server.
# Your server would then manage over 3 million connections. 0_0
# Additionally, you can activate commented-out settings at the end (in this scenario).
# We've also disabled checksum verification in NF because the NIC usually already calculates checksums.
# --------------------------------
 kernel.sched_tunable_scaling = 1
 kernel.shmmax = 268435456
 net.ipv4.tcp_tw_reuse = 1
 vm.swappiness = 20
 net.core.somaxconn = 32000
 net.ipv4.tcp_keepalive_probes = 5
 net.netfilter.nf_conntrack_checksum = 0
 # Tweaks for very powerful servers
 # net.ipv4.tcp_max_tw_buckets = 600000000
 # net.core.netdev_max_backlog = 50000
 # net.ipv4.tcp_max_syn_backlog = 3240000

# Set max conntrack table size.
# --------------------------------
 net.nf_conntrack_max = 20971520
 net.netfilter.nf_conntrack_max = 20971520

# Enable ExecShield to block some remote attacks.
# --------------------------------
 kernel.exec-shield = 2

# Don't log bogus ICMP responses.
# --------------------------------
 net.ipv4.icmp_ignore_bogus_error_responses = 1

# Allow to use more ports as a source ones.
# --------------------------------
 net.ipv4.ip_local_port_range=1024 65535

# Conntrack strict mode.
# --------------------------------
 net.netfilter.nf_conntrack_tcp_loose = 0

# Reverse-path filter.
# You should set '1' to '2' if you're using an assymetric routing.
# --------------------------------
 net.ipv4.conf.all.rp_filter = 1

# Custom ratelimit for invalid TCP packets.
# --------------------------------
net.ipv4.tcp_invalid_ratelimit = 1000" > /etc/sysctl.conf

"$SC" -p > /dev/null 2>&1 &
"$IPS" save > /dev/null 2>&1 &
systemctl enable --now netfilter-persistent > /dev/null 2>&1 &
clear

print_success "Fonctionnel? 'sudo netfilter-persistent save'"

tput sgr0
exit 0